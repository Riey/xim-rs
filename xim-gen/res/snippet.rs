// DO NOT EDIT YOURSELF
// This source is auto generated by xim-gen

#![allow(unused)]

use std::borrow::Borrow;
use std::convert::TryInto;
use std::fmt;

pub fn read(b: &[u8]) -> Result<Request, ReadError> {
    Request::read(&mut Reader::new(b))
}

pub fn write(req: &Request, out: &mut [u8]) {
    req.write(&mut Writer::new(out));
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
#[repr(u8)]
pub enum Endian {
    #[cfg(target_endian = "little")]
    Native = 0x6c,
    #[cfg(target_endian = "big")]
    Native = 0x42,
    // Big = 0x42,
    // Little = 0x6c,
}

#[derive(Clone, Debug, Eq, PartialEq)]
pub enum StatusContent {
    Text(StatusTextContent),
    Pixmap(u32),
}

#[derive(Clone, Debug, Eq, PartialEq)]
pub enum CommitData {
    Synchronous,
    Keysym {
        keysym: u32,
    },
    Chars {
        commited: Vec<u8>,
    },
    Both {
        keysym: u32,
        commited: Vec<u8>,
    },
}

#[derive(Debug, thiserror::Error)]
pub enum ReadError {
    #[error("End of Stream")]
    EndOfStream,
    #[error("Invalid Data {0}: {1}")]
    InvalidData(&'static str, String),
    #[error("Not a native endian")]
    NotNativeEndian,
    #[error("Not a utf8 string")]
    Utf8Error(#[from] std::string::FromUtf8Error),
}

fn pad4(len: usize) -> usize {
    (4 - (len % 4)) % 4
}

fn with_pad4(len: usize) -> usize {
    len + pad4(len)
}

pub struct Reader<'b> {
    bytes: &'b [u8],
    start: usize,
}

impl<'b> Reader<'b> {
    pub fn new(bytes: &'b [u8]) -> Self {
        Self {
            bytes,
            start: bytes.as_ptr() as usize,
        }
    }

    fn ptr_offset(&self) -> usize {
        self.bytes.as_ptr() as usize - self.start
    }

    pub fn cursor(&self) -> usize {
        self.bytes.len()
    }

    pub fn pad4(&mut self) -> Result<(), ReadError> {
        self.consume(pad4(self.ptr_offset()))?;
        Ok(())
    }

    pub fn eos(&self) -> ReadError {
        ReadError::EndOfStream
    }

    pub fn invalid_data(&self, ty: &'static str, item: impl ToString) -> ReadError {
        ReadError::InvalidData(ty, item.to_string())
    }

    pub fn u8(&mut self) -> Result<u8, ReadError> {
        let (b, new) = self.bytes.split_first().ok_or(self.eos())?;
        self.bytes = new;
        Ok(*b)
    }

    pub fn i16(&mut self) -> Result<i16, ReadError> {
        let bytes = self.consume(2)?.try_into().unwrap();
        Ok(i16::from_ne_bytes(bytes))
    }

    pub fn u16(&mut self) -> Result<u16, ReadError> {
        let bytes = self.consume(2)?.try_into().unwrap();
        Ok(u16::from_ne_bytes(bytes))
    }

    pub fn u32(&mut self) -> Result<u32, ReadError> {
        let bytes = self.consume(4)?.try_into().unwrap();
        Ok(u32::from_ne_bytes(bytes))
    }

    pub fn i32(&mut self) -> Result<i32, ReadError> {
        let bytes = self.consume(4)?.try_into().unwrap();
        Ok(i32::from_ne_bytes(bytes))
    }

    pub fn consume(&mut self, len: usize) -> Result<&'b [u8], ReadError> {
        if self.bytes.len() >= len {
            let (out, new) = self.bytes.split_at(len);
            self.bytes = new;
            Ok(out)
        } else {
            Err(self.eos())
        }
    }
}

pub struct Writer<'b> {
    out: &'b mut [u8],
    idx: usize,
}

impl<'b> Writer<'b> {
    pub fn new(out: &'b mut [u8]) -> Self {
        Self { out, idx: 0 }
    }

    pub fn write_u8(&mut self, b: u8) {
        self.out[self.idx] = b;
        self.idx += 1;
    }

    pub fn write(&mut self, bytes: &[u8]) {
        self.out[self.idx..self.idx+bytes.len()].copy_from_slice(bytes);
        self.idx += bytes.len();
    }

    pub fn write_pad4(&mut self) {
        let pad = pad4(self.idx);
        let pad_bytes = [0; 4];
        self.write(&pad_bytes[..pad]);
    }
}

pub trait XimFormat: Sized {
    fn read(reader: &mut Reader) -> Result<Self, ReadError>;
    fn write(&self, writer: &mut Writer);
    /// byte size of format
    fn size(&self) -> usize;
}

impl XimFormat for Endian {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        let n = u8::read(reader)?;

        if n == Endian::Native as u8 {
            Ok(Self::Native)
        } else {
            Err(ReadError::NotNativeEndian)
        }
    }

    fn write(&self, writer: &mut Writer) {
        (*self as u8).write(writer);
    }

    fn size(&self) -> usize {
        1
    }
}

impl XimFormat for StatusContent {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        let ty = u32::read(reader)?;

        match ty {
            0 => Ok(Self::Text(XimFormat::read(reader)?)),
            1 => Ok(Self::Pixmap(XimFormat::read(reader)?)),
            _ => Err(reader.invalid_data("StatusContentType", ty)),
        }
    }

    fn write(&self, writer: &mut Writer) {
        match self {
            StatusContent::Text(content) => {
                0u32.write(writer);
                content.write(writer);
            }
            StatusContent::Pixmap(pixmap) => {
                1u32.write(writer);
                pixmap.write(writer);
            }
        }
    }

    fn size(&self) -> usize {
        let size = match self {
            StatusContent::Text(content) => content.size(),
            StatusContent::Pixmap(pixmap) => std::mem::size_of_val(pixmap),
        };

        size + 4
    }
}

impl XimFormat for CommitData {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        let ty = reader.u16()?;

        match ty {
            1 => {
                Ok(Self::Synchronous)
            }
            2 => {
                reader.consume(2)?;
                let keysym = reader.u32()?;
                Ok(Self::Keysym { keysym })
            }
            4 => {
                let len = reader.u16()?;
                let bytes = reader.consume(len as usize)?;
                reader.pad4()?;
                Ok(Self::Chars { commited: bytes.to_vec() })
            }
            6 => {
                reader.consume(2)?;
                let keysym = reader.u32()?;
                let len = reader.u16()?;
                let bytes = reader.consume(len as usize)?;
                reader.pad4()?;
                Ok(Self::Both { keysym, commited: bytes.to_vec() })
            }
            _ => Err(reader.invalid_data("CommitDataType", ty)),
        }
    }

    fn write(&self, writer: &mut Writer) {
        match self {
            Self::Synchronous => 1u16.write(writer),
            Self::Keysym { keysym } => {
                2u16.write(writer);
                0u16.write(writer);
                keysym.write(writer);
            }
            Self::Chars { commited } => {
                4u16.write(writer);
                (commited.len() as u16).write(writer);
                writer.write(&commited);
                writer.write_pad4();
            }
            Self::Both { keysym, commited } => {
                6u16.write(writer);
                0u16.write(writer);
                keysym.write(writer);
                (commited.len() as u16).write(writer);
                writer.write(&commited);
                writer.write_pad4();
            }
        }
    }

    fn size(&self) -> usize {
        match self {
            Self::Synchronous => 2,
            Self::Keysym { .. } => 6,
            Self::Chars { commited } => with_pad4(commited.len() + 2),
            Self::Both { commited, .. } => with_pad4(commited.len() + 2) + 6,
        }
    }
}

impl XimFormat for u8 {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        reader.u8()
    }

    fn write(&self, writer: &mut Writer) {
        writer.write_u8(*self)
    }

    fn size(&self) -> usize {
        1
    }
}

impl XimFormat for i16 {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        reader.i16()
    }

    fn write(&self, writer: &mut Writer) {
        writer.write(&self.to_ne_bytes())
    }

    fn size(&self) -> usize {
        2
    }
}

impl XimFormat for u16 {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        reader.u16()
    }

    fn write(&self, writer: &mut Writer) {
        writer.write(&self.to_ne_bytes())
    }

    fn size(&self) -> usize {
        2
    }
}

impl XimFormat for u32 {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        reader.u32()
    }

    fn write(&self, writer: &mut Writer) {
        writer.write(&self.to_ne_bytes())
    }

    fn size(&self) -> usize {
        4
    }
}

impl XimFormat for i32 {
    fn read(reader: &mut Reader) -> Result<Self, ReadError> {
        reader.i32()
    }

    fn write(&self, writer: &mut Writer) {
        writer.write(&self.to_ne_bytes())
    }

    fn size(&self) -> usize {
        4
    }
}
